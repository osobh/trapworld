<!DOCTYPE html>
<html>
  <head>
  <link href="public/stylesheets/style.css" rel="stylesheet" type="text/css" />
  </head>
  <body>
    <div class="container">
      <div class="options-box">
        <h1>#TRAPWORLD - SIP</h1>
        <div>
          <input id="show-day" type="button" value="Show Day Crimes">
          <input id="hide-day" type="button" value="Hide Day Crimes">
          <br>
          <input id="show-night" type="button" value="Show Night Crimes">
          <input id="hide-night" type="button" value="Hide Night Crimes">
        </div>
        <hr>
        <input id="pathfinder" type="button" value="Start Pathfinding">
        </div>
      </div>
      <div id="map"></div>
    </div>
    <script>
      console.log(window.location);
      var map;
      // Create a new blank array for all the listing markers.
      var markers = [];
      var nightmarkers = [];
      var nightstyles = [{"featureType":"all","elementType":"labels.text.fill","stylers":[{"color":"#ffffff"}]},{"featureType":"all","elementType":"labels.text.stroke","stylers":[{"color":"#000000"},{"lightness":13}]},{"featureType":"administrative","elementType":"geometry.fill","stylers":[{"color":"#000000"}]},{"featureType":"administrative","elementType":"geometry.stroke","stylers":[{"color":"#144b53"},{"lightness":14},{"weight":1.4}]},{"featureType":"landscape","elementType":"all","stylers":[{"color":"#08304b"}]},{"featureType":"poi","elementType":"geometry","stylers":[{"color":"#0c4152"},{"lightness":5}]},{"featureType":"road.highway","elementType":"geometry.fill","stylers":[{"color":"#000000"}]},{"featureType":"road.highway","elementType":"geometry.stroke","stylers":[{"color":"#0b434f"},{"lightness":25}]},{"featureType":"road.arterial","elementType":"geometry.fill","stylers":[{"color":"#000000"}]},{"featureType":"road.arterial","elementType":"geometry.stroke","stylers":[{"color":"#0b3d51"},{"lightness":16}]},{"featureType":"road.local","elementType":"geometry","stylers":[{"color":"#000000"}]},{"featureType":"transit","elementType":"all","stylers":[{"color":"#146474"}]},{"featureType":"water","elementType":"all","stylers":[{"color":"#021019"}]}];
      var styles = [{"featureType":"administrative.province","elementType":"all","stylers":[{"visibility":"off"},{"lightness":"1"},{"saturation":"44"}]},{"featureType":"landscape","elementType":"all","stylers":[{"saturation":"0"},{"lightness":"0"},{"visibility":"on"},{"color":"#ffffff"},{"gamma":"1"}]},{"featureType":"poi","elementType":"all","stylers":[{"saturation":-100},{"lightness":51},{"visibility":"simplified"}]},{"featureType":"poi.park","elementType":"all","stylers":[{"visibility":"simplified"},{"hue":"#ff0000"}]},{"featureType":"poi.park","elementType":"labels.icon","stylers":[{"visibility":"on"}]},{"featureType":"road.highway","elementType":"all","stylers":[{"saturation":-100},{"visibility":"on"},{"lightness":"8"}]},{"featureType":"road.arterial","elementType":"all","stylers":[{"saturation":-100},{"lightness":"-18"},{"visibility":"on"}]},{"featureType":"road.local","elementType":"all","stylers":[{"saturation":-100},{"lightness":"-20"},{"visibility":"on"}]},{"featureType":"transit","elementType":"all","stylers":[{"saturation":-100},{"visibility":"simplified"}]},{"featureType":"transit.station.airport","elementType":"all","stylers":[{"visibility":"simplified"}]},{"featureType":"water","elementType":"geometry","stylers":[{"hue":"#ffff00"},{"lightness":"-26"},{"saturation":-97}]},{"featureType":"water","elementType":"labels","stylers":[{"visibility":"on"},{"lightness":-25},{"saturation":-100}]}];



      function initMap() {
        // Create a styles array to use with the map.
        // Constructor creates a new map - only center and zoom are required.
        map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 37.7749, lng: -122.4194},
          zoom: 15,
          styles: styles,
          mapTypeControl: false
        });

    var locations = [];
    var nightLocations = [];

    console.log("Map: ",map);

    $.ajax({

    // The URL for the request
    url: "http://localhost:3000",

    // Whether this is a POST or GET request
    type: "GET",

    // The type of data we expect back
    dataType : "json",
    })
      // Code to run if the request succeeds (is done);
  // The response is passed to the function
  .done(function( json ) {
     nightLocations = json;
     //console.log(nightLocations);
     for (var i = 0; i < nightLocations.length; i++) {
          // Get the position from the location array.
          var position = nightLocations[i].location;
          var title = nightLocations[i].title;
          // Create a marker per location, and put into markers array.
          var marker = new google.maps.Marker({
            position: position,
            title: title,
            animation: google.maps.Animation.DROP,
            icon: nightCrime,
            id: i
          });
          // Push the marker to our array of markers.
          nightmarkers.push(marker);
     }
  })
  // Code to run if the request fails; the raw request and
  // status codes are passed to the function
  .fail(function( xhr, status, errorThrown ) {
    console.log( "Sorry, there was a problem!" );
    console.log( "Error: " + errorThrown );
    console.log( "Status: " + status );
    console.dir( xhr );
  })
  // Code to run regardless of success or failure;
  .always(function( xhr, status ) {
    console.log( "The request is complete!" );
  });

   $.ajax({

    // The URL for the request
    url: "http://localhost:3000",

    // Whether this is a POST or GET request
    type: "GET",

    // The type of data we expect back
    dataType : "json",
    })
      // Code to run if the request succeeds (is done);
  // The response is passed to the function
  .done(function( json ) {
     locations = json;
     //console.log(locations);
     for (var i = 0; i < locations.length; i++) {
          // Get the position from the location array.
          var position = locations[i].location;
          var title = locations[i].title;
          // Create a marker per location, and put into markers array.
          var marker = new google.maps.Marker({
            position: position,
            title: title,
            animation: google.maps.Animation.DROP,
            icon: defaultIcon,
            id: i
          });
          // Push the marker to our array of markers.
          markers.push(marker);
     }
  })
  // Code to run if the request fails; the raw request and
  // status codes are passed to the function
  .fail(function( xhr, status, errorThrown ) {
    console.log( "Sorry, there was a problem!" );
    console.log( "Error: " + errorThrown );
    console.log( "Status: " + status );
    console.dir( xhr );
  })
  // Code to run regardless of success or failure;
  .always(function( xhr, status ) {
    console.log( "The request is complete!" );
  });


        //var largeInfowindow = new google.maps.InfoWindow();

        // Style the markers a bit. This will be our listing marker icon.
        var defaultIcon = makeMarkerIcon('0091ff');
        var nightCrime = makeMarkerIcon('ff0012');
        // Create a "highlighted location" marker color for when the user
        // mouses over the marker.
        var highlightedIcon = makeMarkerIcon('FFFF24');

        // The following group uses the location array to create an array of markers on initialize.
        for (var i = 0; i < locations.length; i++) {
          // Get the position from the location array.
          var position = locations[i].location;
          var title = locations[i].title;
          // Create a marker per location, and put into markers array.
          var marker = new google.maps.Marker({
            position: position,
            title: title,
            animation: google.maps.Animation.DROP,
            icon: defaultIcon,
            id: i
          });
          // Push the marker to our array of markers.
          markers.push(marker);
          // Create an onclick event to open the large infowindow at each marker.
          // marker.addListener('click', function() {
          //   populateInfoWindow(this, largeInfowindow);
          // });
          // Two event listeners - one for mouseover, one for mouseout,
          // to change the colors back and forth.
          marker.addListener('mouseover', function() {
            this.setIcon(highlightedIcon);
          });
          marker.addListener('mouseout', function() {
            this.setIcon(defaultIcon);
          });
        }

        document.getElementById('show-day').addEventListener('click', showDayListings);
        document.getElementById('hide-day').addEventListener('click', hideListings);
        document.getElementById('show-night').addEventListener('click', showNightListings);
        document.getElementById('hide-night').addEventListener('click', hideNightListings);

      }

      // This function will loop through the markers array and display them all.
      function showNightListings() {
        var bounds = new google.maps.LatLngBounds();
        // Extend the boundaries of the map for each marker and display the marker
        for (var i = 0; i < nightmarkers.length; i++) {
          nightmarkers[i].setMap(map);
          bounds.extend(nightmarkers[i].position);
        }
        map.fitBounds(bounds);
        map.setOptions({styles: nightstyles});
      }

      function showDayListings() {
        var bounds = new google.maps.LatLngBounds();
        //map.setCenter({lat: 37.7749, lng: -122.4194});
        // Extend the boundaries of the map for each marker and display the marker
        for (var i = 0; i < markers.length; i++) {
          markers[i].setMap(map);
          bounds.extend(markers[i].position);
        }
        map.fitBounds(bounds);
        map.setOptions({styles: styles});
      }

      // This function will loop through the listings and hide them all.
      function hideListings() {
        for (var i = 0; i < markers.length; i++) {
          markers[i].setMap(null);
        }
      }

      function hideNightListings() {
        for (var i = 0; i < nightmarkers.length; i++) {
          nightmarkers[i].setMap(null);
        }
      }
      // This function takes in a COLOR, and then creates a new marker
      // icon of that color. The icon will be 21 px wide by 34 high, have an origin
      // of 0, 0 and be anchored at 10, 34).
      function makeMarkerIcon(markerColor) {
        var markerImage = new google.maps.MarkerImage(
          'https://chart.googleapis.com/chart?chst=d_map_spin&chld=1.15|0|'+ markerColor +
          '|40|_|%E2%80%A2',
          new google.maps.Size(21, 34),
          new google.maps.Point(0, 0),
          new google.maps.Point(10, 34),
          new google.maps.Size(21,34));
        return markerImage;
      }

    </script>
    <script src="./routes/graph.js">
      console.log(noScope);
    </script>

    <script async defer
        src= "https://maps.googleapis.com/maps/api/js?key=AIzaSyDKu9mkdXSiufRO_oqPMAVhvr7tBBrs998&v=3&callback=initMap">
    </script>
    <script src="https://code.jquery.com/jquery-3.1.0.min.js"></script>
  </body>
</html>
